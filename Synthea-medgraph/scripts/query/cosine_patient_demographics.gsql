drop query cosine_patient_demographics

# Computes the cosine similarity between a given vertex & every other vertex
create query cosine_patient_demographics(STRING firstName, STRING lastName, INT topK) FOR GRAPH @graphname@ returns (MapAccum<VERTEX, DOUBLE>) {
    MapAccum<VERTEX, DOUBLE> @@topk_result;
    SumAccum<DOUBLE> @latitude, @longitude, @distance, @similarity, @ageCount;
    SumAccum<INT> @age, @sexCount, @raceCount, @ethnicityCount;
    SumAccum<STRING> @sex, @race, @ethnicity;
    MaxAccum<DOUBLE> @@maxDistance = 0;
    string patientSex, patientRace, patientEthnicity, patientID;
    int patientAge;
    DOUBLe patientLat, patientLon, dLat, dLon, a, c, d;

    # Possibly include these factors as well
    # SumAccum<INT> @healthcareExpense, @healthcareCoverage, @maritulstatus

    SOURCE = {_Patient.*};

    patients = select s
              from SOURCE:s - (_PATIENT_GENDER:e) - :t
              WHERE s.lastName == lastName and s.firstName == firstName
              ACCUM s.@sex = t.gender_id,
                    patientSex = t.gender_id,
                    s.@age = year(now()) - year(s.birthday),
                    patientAge = year(now()) - year(s.birthday),
                    patientID = s.patient_id;
    patients = select s
                from patients:s - (_PATIENT_RACE:e) - :t
                ACCUM s.@race = t.race_id,
                      patientRace = t.race_id;
    patients = select s
                from patients:s - (_PATIENT_ETHNICITY:e) - :t
                ACCUM s.@ethnicity = t.ethnicity_id,
                      patientEthnicity = t.ethnicity_id;

    patients = select s
                from patients:s - (_PATIENT_ADDRESS:e) - _Address:t
                ACCUM s.@latitude = t.lat,
                      s.@longitude = t.lon,
                      patientLat = t.lat,
                      patientLon = t.lon;

    print patients[patients.lastName, patients.firstName, patients.patient_id, patients.@sex, patients.@age, patients.@race, patients.@ethnicity, patients.@latitude, patients.@longitude];

    subjects = select s
               from SOURCE:s - (_PATIENT_GENDER:e) - :t
               WHERE s.patient_id != patientID
               ACCUM s.@age = year(now()) - year(s.birthday),
                    IF t.gender_id == patientSex THEN s.@sexCount = 1
                    ELSE s.@sexCount = 0
                    END
                POST-ACCUM IF s.@age > patientAge THEN s.@ageCount = patientAge / s.@age
                            ELSE s.@ageCount = s.@age/ patientAge END;
    subjects = select s
                from subjects:s - (_PATIENT_RACE:e) - :t
                ACCUM if t.race_id == patientRace then s.@raceCount = 1
                else s.@raceCount = 0
                end;

    subjects = select s
                from subjects:s - (_PATIENT_ETHNICITY:e) - :t
                ACCUM If t.ethnicity_id == patientEthnicity then s.@ethnicityCount = 1
                else s.@ethnicityCount = 0
                end;

    subjects = select s
               from subjects:s - (_PATIENT_ADDRESS:e) - :t
               ACCUM dLat = (t.lat - patientLat) / 57.29577951,
                     dLon = (t.lon - patientLon) / 57.29577951,
                     a = (sin(dLat/2) * sin(dLat/2)) + (cos(patientLat / 57.29577951) * cos(patientLon / 57.29577951) * sin(dLon/2) * sin(dLon/2)),
                     c = 2 * atan2(sqrt(a), sqrt(1-a)),
                     d = 6371 * c,
                     s.@distance = d,
                     @@maxDistance += d
               POST-ACCUM s.@similarity = (s.@ageCount + s.@sexCount + s.@ethnicityCount + s.@raceCount + (1-(s.@distance / @@maxDistance)))/6
               order by s.@similarity desc
               limit topK;

    subjects = select s
               from subjects: s
               accum @@topk_result += (s-> s.@similarity);

    return @@topk_result;
}

Install query cosine_patient_demographics
